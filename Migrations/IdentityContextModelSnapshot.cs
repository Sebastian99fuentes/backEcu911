// <auto-generated />
using System;
using MatrizPlanificacion;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MatrizPlanificacion.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatrizPlanificacion.Modelos.AlertaDSPPP", b =>
                {
                    b.Property<Guid>("AlertaDSPPPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcesoCompraId")
                        .HasColumnType("uuid");

                    b.Property<string>("descripcionAlerta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AlertaDSPPPId");

                    b.HasIndex("ProcesoCompraId");

                    b.ToTable("Alertas");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Contractual", b =>
                {
                    b.Property<Guid>("ContractualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrecontractualId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("fechaFinalizacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaSuscripcion")
                        .HasColumnType("date");

                    b.Property<string>("nombreProveedor")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("rucOferente")
                        .HasColumnType("integer");

                    b.HasKey("ContractualId");

                    b.HasIndex("PrecontractualId");

                    b.ToTable("Contractuales");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Estado", b =>
                {
                    b.Property<Guid>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("tipoEstado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Etapa", b =>
                {
                    b.Property<Guid>("EtapaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("tipoEtapa")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("EtapaId");

                    b.ToTable("Etapas");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Observacion", b =>
                {
                    b.Property<Guid>("ObservacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcesoId")
                        .HasColumnType("uuid");

                    b.Property<string>("descripcionObservacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("fechaObsservacion")
                        .HasColumnType("date");

                    b.HasKey("ObservacionId");

                    b.HasIndex("ProcesoId");

                    b.ToTable("Observaciones");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.PlantaUnidadArea", b =>
                {
                    b.Property<Guid>("PlantaUnidadAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PadreId")
                        .HasColumnType("uuid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("tipo")
                        .HasColumnType("character(1)");

                    b.HasKey("PlantaUnidadAreaId");

                    b.HasIndex("PadreId");

                    b.ToTable("PlantaUnidadAreas");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Precontractual", b =>
                {
                    b.Property<Guid>("PrecontractualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractualId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PreparatoriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("administradorContrato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("fechaAdjudicacion")
                        .HasColumnType("date");

                    b.Property<decimal>("valorAdjudicado")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("PrecontractualId");

                    b.HasIndex("ContractualId");

                    b.HasIndex("PreparatoriaId");

                    b.ToTable("Precontractuales");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Preparatoria", b =>
                {
                    b.Property<Guid>("PreparatoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrecontractualId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcesoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("fechaAutorizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("fechaEmision")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaMesa")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaProgramada")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaPublicacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaReal")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaRespuesta")
                        .HasColumnType("date");

                    b.Property<DateOnly>("fechaSolicitud")
                        .HasColumnType("date");

                    b.Property<decimal>("valorCertificado")
                        .HasColumnType("numeric");

                    b.HasKey("PreparatoriaId");

                    b.HasIndex("PrecontractualId");

                    b.HasIndex("ProcesoId")
                        .IsUnique();

                    b.ToTable("Preparatorias");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.ProcedimientoContratacion", b =>
                {
                    b.Property<Guid>("ProcedimientoContratacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("tipoProcedimiento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProcedimientoContratacionId");

                    b.ToTable("ProcedimientoContrataciones");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.ProcesoCompra", b =>
                {
                    b.Property<Guid>("ProcesoCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EtapaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PreparatoriaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcedimientoId")
                        .HasColumnType("uuid");

                    b.Property<long>("cpc")
                        .HasColumnType("bigint");

                    b.Property<int>("cuatrimestre")
                        .HasColumnType("integer");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("grupoGasto")
                        .HasColumnType("integer");

                    b.Property<long>("itemPresup")
                        .HasColumnType("bigint");

                    b.Property<string>("mesPlanificado")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("numProceso")
                        .HasColumnType("integer");

                    b.Property<decimal>("total")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("ProcesoCompraId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("EtapaId");

                    b.HasIndex("PlantaId");

                    b.HasIndex("PreparatoriaId");

                    b.HasIndex("ProcedimientoId");

                    b.ToTable("ProcesoCompras");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.AlertaDSPPP", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.ProcesoCompra", "ProcesoCompra")
                        .WithMany("AlertasDSPPP")
                        .HasForeignKey("ProcesoCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcesoCompra");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Contractual", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.Precontractual", "Precontractual")
                        .WithMany()
                        .HasForeignKey("PrecontractualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Precontractual");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Observacion", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.ProcesoCompra", "ProcesoCompra")
                        .WithMany("Observaciones")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcesoCompra");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.PlantaUnidadArea", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.PlantaUnidadArea", "Padre")
                        .WithMany("PlantaUnidadAreas")
                        .HasForeignKey("PadreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Padre");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Precontractual", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.Contractual", "Contractual")
                        .WithMany()
                        .HasForeignKey("ContractualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.Preparatoria", "Preparatoria")
                        .WithMany()
                        .HasForeignKey("PreparatoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractual");

                    b.Navigation("Preparatoria");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Preparatoria", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.Precontractual", "Precontractual")
                        .WithMany()
                        .HasForeignKey("PrecontractualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.ProcesoCompra", "ProcesoCompra")
                        .WithOne()
                        .HasForeignKey("MatrizPlanificacion.Modelos.Preparatoria", "ProcesoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Precontractual");

                    b.Navigation("ProcesoCompra");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.ProcesoCompra", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.Estado", "Estado")
                        .WithMany("ProcesoCompras")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.Etapa", "Etapa")
                        .WithMany("ProcesoCompras")
                        .HasForeignKey("EtapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.PlantaUnidadArea", "PlantaUnidadArea")
                        .WithMany("ProcesoCompras")
                        .HasForeignKey("PlantaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.Preparatoria", "Preparatoria")
                        .WithMany()
                        .HasForeignKey("PreparatoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.ProcedimientoContratacion", "ProcedimientoContratacion")
                        .WithMany("ProcesoCompra")
                        .HasForeignKey("ProcedimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Etapa");

                    b.Navigation("PlantaUnidadArea");

                    b.Navigation("Preparatoria");

                    b.Navigation("ProcedimientoContratacion");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.User", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.PlantaUnidadArea", "area")
                        .WithMany("Usuarios")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("area");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatrizPlanificacion.Modelos.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MatrizPlanificacion.Modelos.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Estado", b =>
                {
                    b.Navigation("ProcesoCompras");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.Etapa", b =>
                {
                    b.Navigation("ProcesoCompras");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.PlantaUnidadArea", b =>
                {
                    b.Navigation("PlantaUnidadAreas");

                    b.Navigation("ProcesoCompras");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.ProcedimientoContratacion", b =>
                {
                    b.Navigation("ProcesoCompra");
                });

            modelBuilder.Entity("MatrizPlanificacion.Modelos.ProcesoCompra", b =>
                {
                    b.Navigation("AlertasDSPPP");

                    b.Navigation("Observaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
